@startuml TaxiCallService. Диаграмма компонентов
title "C4. Компоненты - Микросервис вызова такси"

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
!$ICONURL = "https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/v3.0.0/icons"
!include $ICONURL/common.puml
!include $ICONURL/devicons/go.puml
!include $ICONURL/devicons/postgresql.puml

Component(taxiCallMicroservice, "Клиент", "Go", $sprite="go")

System_Boundary(apiBoundary, "Микросервис вызова такси") {

    Component(CallController, "CallController", "Go", "Управление вызовами такси")
    Component(DriverController, "DriverController", "Go", "Управление данными о водителях")
    Component(DispatchController, "DispatchController", "Go", "Распределение водителей на вызов")

    Rel(taxiCallMicroservice, CallController, "REST API")
    Rel(taxiCallMicroservice, DriverController, "REST API")
    Rel(taxiCallMicroservice, DispatchController, "REST API")

    Component(CallService, "CallService", "Go", "Обработка вызовов такси")
    Component(DriverService, "DriverService", "Go", "Управление водителями")
    Component(DispatchService, "DispatchService", "Go", "Распределение водителей по запросам")
    Component(PriceCalculationService, "PriceCalculationService", "Go", "Расчет стоимости поездок")
    Component(NotificationService, "NotificationService", "Go", "Уведомление пользователей о статусе вызова")

    Rel(CallController, CallService, "Запросы на создание вызова")
    Rel(DriverController, DriverService, "Запросы данных о водителях")
    Rel(DispatchController, DispatchService, "Запросы на распределение")
    Rel(CallService, PriceCalculationService, "Расчет стоимости поездки")
    Rel(CallService, NotificationService, "Отправка уведомлений клиенту")
    Rel(DispatchService, DriverService, "Получение списка доступных водителей")

    Component(CallRepository, "CallRepository Interface", "Go", "Интерфейс хранения данных вызовов")
    Component(DriverRepository, "DriverRepository Interface", "Go", "Интерфейс хранения данных о водителях")
    Component(GeocoderService, "GeocoderService Interface", "Go", "Интерфейс геокодера")
    Component(PaymentService, "PaymentService Interface", "Go", "Интерфейс интеграции с платежной системой")

    Rel(CallService, CallRepository, "Использует интерфейс для запросов")
    Rel(DriverService, DriverRepository, "Использует интерфейс для запросов")
    Rel(CallService, GeocoderService, "Использует интерфейс для получения координат")
    Rel(CallService, PaymentService, "Использует интерфейс для оплаты")

    Component(GeocoderClient, "GeocoderClient", "Go", "Конкретная реализация геокодера")
    Component(PaymentClient, "PaymentClient", "Go", "Конкретная реализация платежной системы")
    
    Rel(GeocoderClient, GeocoderService, "Реализация интерфейса")
    Rel(PaymentClient, PaymentService, "Реализация интерфейса")
}

System_Ext(geocoder, "Геокодер", "Определение координат и адресов")
System_Ext(payment, "Платежная система", "Обработка платежей")

Rel(GeocoderClient, geocoder, "REST API")
Rel(PaymentClient, payment, "REST API")

@enduml
